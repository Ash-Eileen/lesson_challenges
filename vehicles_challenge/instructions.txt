Inheritance with Vehicles
To recap, Inheritance is where an object inherits the properties and methods of a parent object. This means the child object will automatically have those methods, without having to implement them.

In Ruby, an object can only inherit from one single parent.

IMPORTANT: Please click the "Mark" button to run our tests periodically after finishing each of the different sections of this challenge to ensure your code is working as expected. Note: The last two test cases will only pass if you've completed the extra challenge below.

Challenge:
Implement a Vehicle class. It should accept make and model properties when you create an object. 

 E.g.

civic = Vehicle.new("Honda", "Civic")
 Implement a Car class. It should inherit from Vehicle. 

E.g.

civic = Car.new("Honda", "Civic")
 Implement a Motorbike class. It should also inherit from Vehicle. 

E.g.

low_rider = Motorbike.new("Harley Davidson", "Low Rider")
Next, implement the following methods, but first, decide which class they should live in.

refuel (should take one argument: litres)

wheelie (should display a message)

wind_up_windows (should display a message)

fuel_level (should display total litres in the tank)

refuel should now increase fuel_level by litres passed 

Extra Challenge: 
A car should only allow maximum 50L of petrol and a bike 15L. Keep your code DRY :) Hint: research how `super` works.

refuel should not go over the maximum fuel level for each type of vehicle, respectively

Example:

civic = Car.new("Honda", "Civic")
civic.fuel_level # -> 0L in the tank
civic.refuel(10)
civic.fuel_level # -> 10L in the tank
civic.refuel(10)
civic.fuel_level # -> 20L in the tank
civic.refuel(100)
civic.fuel_level # -> 50L in the tank